package f1ap

import (
	"bytes"
	"fmt"
	"io"

	"github.com/lvdund/ngap/aper"
	"github.com/lvdund/ngap/ies"
)

func F1apDecode(buf []byte) (pdu F1apPdu, err error, diagnostics *ies.CriticalityDiagnostics) {
	r := aper.NewReader(bytes.NewBuffer(buf))

	var ext bool
	if ext, err = r.ReadBool(); err != nil {
		return
	}
	_ = ext

	c, err := r.ReadChoice(2, false)
	if err != nil {
		return
	}
	present := uint8(c)

	v, err := r.ReadInteger(&aper.Constraint{Lb: 0, Ub: 255}, false)
	if err != nil {
		return
	}
	procedureCode := ies.ProcedureCode{Value: aper.Integer(v)}

	e, err := r.ReadEnumerate(aper.Constraint{Lb: 0, Ub: 2}, false)
	if err != nil {
		return
	}
	criticality := ies.Criticality{Value: aper.Enumerated(e)}

	var containerBytes []byte
	if containerBytes, err = r.ReadOpenType(); err != nil {
		return
	}

	message := createF1apMessage(present, procedureCode)
	if message == nil {
		err = fmt.Errorf("unknown F1AP message")
		return
	}

	var diagnosticsItems []ies.CriticalityDiagnosticsIEItem
	if err, diagnosticsItems = message.Decode(containerBytes); err != nil {
		return
	}

	pdu = F1apPdu{
		Present: present,
		Message: F1apMessage{
			ProcedureCode: procedureCode,
			Criticality:   criticality,
			Msg:           message,
		},
	}

	diagnostics = ies.BuildDiagnostics(present, procedureCode, criticality, diagnosticsItems)
	return
}

func TransferDecode(ioR io.Reader) (pdu F1apPdu, err error, diagnostics *ies.CriticalityDiagnostics) {
	r := aper.NewReader(ioR)
	if _, err = r.ReadBool(); err != nil {
		return
	}
	return
}
